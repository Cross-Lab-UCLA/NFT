% bem_load_model_matrix() - Loads the BEM matrix with extension 'ext'.
% The matrix file name is defined by <model.name>.<ext>
% The matrix is placed into the model with a field name 'ext'
%
% Usage:
%   >> model = bem_load_model_matrix(model, ext);
%
% Inputs:
%   model - model structure generated by bem_create_model().
%   ext - matrix type. The following types are defined:
%     'cmt' - BEM Coefficient matrix
%     'dmt' - band of Coefficient matrix used by IPA
%     'imt' - inner Coefficient Matrix used by IPA
%     'iinv' - inverse of the inner coefficient matrix. This matrix is
%       computed from 'imt' if the file does not exist.
%
% Outputs:
%   model - model structure.
%
% Author: Zeynep Akalin Acar, SCCN, 2007

% Copyright (C) 2007 Zeynep Akalin Acar, SCCN, zeynep@sccn.ucsd.edu
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

function model = bem_load_model_matrix(model, ext)

% check model and mesh fields
if ~isempty(find(isfield(model, {'name', 'mesh'}) == 0,1))
    error('BEM:bem_load_model_matrix:model','%s','Invalid model');
end
mesh = model.mesh;
if ~isempty(find(isfield(mesh, {'name','num_class'}) == 0,1))
    error('BEM:bem_load_model_matrix:mesh','%s','Invalid mesh');
end

if ~ischar(ext)
    error('BEM:bem_load_model_matrix:ext','%s','Invalid extension');
end
ext = lower(ext);
if ~(strcmp(ext,'cmt') || strcmp(ext,'dmt') || strcmp(ext,'imt') || ...
        strcmp(ext,'iinv'))
    error('BEM:bem_load_model_matrix:ext','%s','Unknown matrix type');
end

try
    m = load(sprintf('%s.%s', model.name, ext));
catch
    % iinv is handled specially
    if strcmp(ext,'iinv')
        load_imt = 0;
        try
            if ~isfield(model, 'imt')
                load_imt = 1;
                model=bem_load_model_matrix(model, 'imt');
            end
        catch
          error('BEM:bem_load_model_matrix:ext','%s','Failed to load "imt" for inverting.');
        end
        warning('BEM:info','Inverting "imt" to compute "iinv"');
        m = inv(model.imt);
        fn = sprintf('%s.iinv', model.name);
        save(fn, 'm', '-ascii', '-double');
        if load_imt
            % if we loaded 'imt' remove it to save memory
            model = rmfield(model,'imt');
        end
    else
        % for other matrices just return error
        error('BEM:bem_load_model_matrix:ext','Failed to load %s.%s', model.name, ext);
    end
end

model.(ext) = m;