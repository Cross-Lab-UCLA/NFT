% bem_generate_eeg_matrices() - Generates BEM matrices for a BEM model.
%
% Usage:
%       >> bem_generate_eeg_matrices(model);
%
% Inputs:
%   model - model structure generated by BEM_CREATE_MODEL
%
% Notes: The matrices are created using the name given in the model structure
%       The following matrices are created on disk, and can be read
%       using the bem_load_model_matrix().
%       <model.name>.cmt - BEM Coefficient matrix
%       <model.name>.dmt - band of Coefficient matrix used by IPA
%       <model.name>.imt - inner Coefficient Matrix used by IPA
%
% Author: Zeynep Akalin Acar, SCCN, 2007

% Copyright (C) 2007 Zeynep Akalin Acar, SCCN, zeynep@sccn.ucsd.edu
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

function bem_generate_eeg_matrices(model)

% load bem configuration for path names
conf = nft_get_config;

% check model and mesh fields
if ~isempty(find(isfield(model, {'name', 'mesh', 'mod'}) == 0,1))
    error('BEM:bem_generate_eeg_matrices:model','%s','Invalid model');
end
mesh = model.mesh;
if ~isempty(find(isfield(mesh, {'name','num_class'}) == 0,1))
    error('BEM:bem_generate_eeg_matrices:mesh','%s','Invalid mesh');
end

%a = sprintf('"%s" -f "%s" -o %d "%s"', ...
%    conf.bem_matrix_program, model.name, model.mod, mesh.name);

path_unix = conf.bem_matrix_program;
path_unix(strfind(path_unix,'\'))='/';
path_unix = strrep(path_unix,'E:','/mnt/e')

a = sprintf('wsl "%s" -f "%s" -o %d "%s"', ...
    path_unix, model.name, model.mod, mesh.name);

for i = 1:mesh.num_class
    a = sprintf('%s %d=%0.5g', a, i, model.cond(i));
end

[status, result] = system(a);
if status ~= 0
    error('BEM:bem_generate_eeg_matrices:system','Failed to execute: %s',result);
end
